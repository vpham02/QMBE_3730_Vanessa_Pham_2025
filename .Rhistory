mod.wage <- lm(data = nbasal, wage.dol ~ exper1)
summary(mod.wage)
help("nbasal")
wage.dol <- nbasal$wage/1000
wage.dol <- nbasal$wage*1000
mod.wage <- lm(data = nbasal, wage.dol ~ exper1)
summary(mod.wage)
807932 + (120317*-193248)
summary(nbasal$exper)
807932 + (120317*4)
1289200/1000
wage.dol2 <- log(nbasal$wage)
mod.log <- lm(data = nbasal, wage.dol2 ~ exper1)
summary()
summary(mod.log)
wage.log <- log(nbasal$wage)
mod.log <- lm(data = nbasal, wage.log ~ exper1)
mod.wage2 <- lm(data = nbasal, wage.dol ~ exper1 + age + coll + points +
minutes + children + marr)
summary(mod.wage2)
mod.wage3 <- lm(data = nbasal, wage.dol ~ exper1 + age + coll + points +
minutes + children + marr + expersq)
summary(mod.wage3)
mod.log <- lm(data = nbasal, wage.log ~ exper1)
summary(mod.log)
100*(exp(.1053*1)-1)
100*(exp(.1053*5)-1)
#h
point.x.exp <- points*exper
install.packages("tidyverse")
install.packages("stargazer")
library(tidyverse)
library(stargazer)
install.packages("wooldridge")
library(wooldridge)
#-----------------------------------------------------------------------
#Load Data
view(nbasal)
help("nbasal")
#h
point.x.exp <- points*exper
View(rdchem)
install.packages("tidyverse")
install.packages("stargazer")
library(tidyverse)
library(stargazer)
install.packages("wooldridge")
library(wooldridge)
View(rdchem)
mod.a <- lm(data = rdchem, rdintens ~ sales + salessq)
summary(mod.a)
salesbil <- sales/1,000
salesbil <- sales/1000
salesbil <- rdchem$sales/1000
salesbil2 <- (rdchem$sales^2)/(1000^2)
install.packages("tidyverse")
install.packages("stargazer")
library(tidyverse)
library(stargazer)
install.packages("wooldridge")
library(wooldridge)
mod.c <- lm(data = rdchem, rdintens ~ salesbil + salesbil2)
summary(mod.c)
view(wage2)
install.packages("tidyverse")
install.packages("stargazer")
library(tidyverse)
library(stargazer)
install.packages("wooldridge")
library(wooldridge)
#-----------------------------------------------------------------------
#Load Data
view(beauty)
reg1 <- lm(data = beauty, wage ~ belavg + educ + exper + union + goodhlth + black +
married + south + bicity + smallcity + service + female)
reg1 <- lm(data = beauty, wage ~ belavg + educ + exper + union + goodhlth + black +
married + south + bigcity + smallcity + service + female)
reg1 <- lm(data = beauty, wage ~ belavg + educ + exper + union + goodhlth + black +
married + south + bigcity + smllcity + service + female)
summary(reg1)
reg2 <- lm(data = beauty,wage ~ belavg + I(educ^2) + I(exper^2) + union + goodhlth + black +
married + south + bigcity + smllcity + service + female)
summary(reg2)
summary(wage2)
install.packages("tidyverse")
install.packages("stargazer")
library(tidyverse)
library(stargazer)
install.packages("wooldridge")
library(wooldridge)
summary(beauty)
install.packages("tidyverse")
install.packages("stargazer")
library(tidyverse)
library(stargazer)
install.packages("wooldridge")
library(wooldridge)
# Example 7.12
data("crime1")
summary(fertil3)
reg.7 <- lm(lngfr ~ lnpe + lnpe1 + lnpe2 + lnpe3 + lnpe4 + ww2 + pill,
data = feril3)
reg.7 <- lm(lngfr ~ lnpe + lnpe1 + lnpe2 + lnpe3 + lnpe4 + ww2 + pill,
data = fertil3)
lngfr <- log(feril3$gfr)
lnpe <- log(fertil3$pe+1)
lnpe1 <- log(fertil3$pe_1+1)
lnpe2 <- log(fertil3$pe_2+1)
lnpe3 <- log(fertil3$pe_3+1)
lnpe4 <- log(fertil3$pe_4+1)
lngfr <- log(feril3$gfr)
lngfr <- log(fertil3$gfr)
reg.7 <- lm(lngfr ~ lnpe + lnpe1 + lnpe2 + lnpe3 + lnpe4 + ww2 + pill,
data = fertil3)
summary(reg.7)
0.20963-0.01612 +0.00029+0.02802-0.10053
new.fertil <- subset(fertil3, pe != 0 & pe_1 != 0 & pe_2 != 0 & pe_3 != 0 &
pe_4 != 0)
lnpe <- log(new.fertil3$pe+1)
lnpe1 <- log(new.fertil3$pe_1+1)
lnpe2 <- log(new.fertil3$pe_2+1)
lnpe3 <- log(new.fertil3$pe_3+1)
lnpe4 <- log(new.fertil3$pe_4+1)
lngfr <- log(new.fertil3$gfr)
reg.8 <- lm(lngfr ~ lnpe + lnpe1 + lnpe2 + lnpe3 + lnpe4 + ww2 +
pill, data = fertil3)
summary(reg.8)
plot(fertil3$gfr)
plot(fertil3$pe)
reg.9 <- lm(gfr ~ pe + pe1 + pe2 + pe3 + pe4 + ww2 + pill + t,
data = fertil3)
reg.9 <- lm(gfr ~ pe + pe_1 + pe_2 + pe_3 + pe_4 + ww2 + pill + t,
data = fertil3)
summary(reg.9)
install.packages("tidyverse")
install.packages("stargazer")
library(tidyverse)
library(stargazer)
install.packages("wooldridge")
library(wooldridge)
#-----------------------------------------------------------------------
#Load Data
view(alcohol)
help("alcohol")
reg.1 <- lm(alcohol ~ northeast + midwest + south + centcity
+ outercity + employ + beertaxsq + cigtaxsq, data = alcohol)
reg.1 <- lm(abuse ~ northeast + midwest + south + centcity
+ outercity + employ + beertaxsq + cigtaxsq, data = alcohol)
summary(reg.1)
#f - stat
((0.4986 - 0.4734)/2) / ((1-0.4986)/64)
## Are the lagged terms significant as a block?
#f-stat
((0.5368 - 0.4734)/4)/((1-0.5368)/60)
reg.6 <- lm(gfr~ pe + pe_1 + pe_2 + pe_3 + pe_4 + ww2 + pill, data = fertil3)
summary(reg.6)
reg.1 <- lm(abuse ~ northeast + midwest + south + centcity
+ outercity + employ + beertax + cigtax, data = alcohol)
summary(reg.1)
summary(reg.1)
reg.1 <- lm(abuse ~ northeast + midwest + south + centcity
+ outercity + unemrate + beertax + cigtax, data = alcohol)
summary(reg.1)
summary(reg.1)
reg.2 <- lm(abuse ~ northeast + midwest + south + centcity
+ outercity + umemrate + beertax + cigtax + age +
agesq + educ + educsq + married
+ famsize + white, data = alcohol)
reg.2 <- lm(abuse ~ northeast + midwest + south + centcity
+ outercity + unemrate + beertax + cigtax + age +
agesq + educ + educsq + married
+ famsize + white, data = alcohol)
summary(reg.2)
summary(reg.2)
reg1.b <- lm(wage ~ belavg + abvavg + educ + I(educ^2) + exper + I(exper^2) + union + goodhlth + black + married + south + bigcity + smllcity + service + female, data = beauty.data)
beauty.data <- data
reg1.b <- lm(wage ~ belavg + abvavg + educ + I(educ^2) + exper + I(exper^2) + union + goodhlth + black + married + south + bigcity + smllcity + service + female, data = beauty.data)
reg1 <- lm(wage ~ belavg + abvavg + educ + exper + union + goodhlth + black + married + south + bigcity + smllcity + service + female, data = beauty.data)
view(beauty)
reg1.b <- lm(wage ~ belavg + abvavg + educ + I(educ^2) + exper + I(exper^2) +
union + goodhlth + black + married + south + bigcity + smllcity
+ service + female, data = beauty.data)
reg1.b <- lm(wage ~ belavg + abvavg + educ + I(educ^2) + exper + I(exper^2) +
union + goodhlth + black + married + south + bigcity + smllcity
+ service + female, data = beauty.data)
#Wage is increasing at a descelerating rate.
0.2411913/(2*0.0038451) # Turning point 31.4 years - wage descreases with more experience.
reg1.b <- lm(wage ~ belavg + abvavg + educ + I(educ^2) + exper + I(exper^2) +
union + goodhlth + black + married + south + bigcity + smllcity
+ service + female, data = beauty.data)
reg1 <- lm(wage ~ belavg + abvavg + educ + exper + union + goodhlth + black + married + south + bigcity + smllcity + service + female, data = beauty.data)
summary(reg.1)
reg.2 <- lm(abuse ~ northeast + midwest + south + centcity
+ outercity + unemrate + beertax + cigtax + age +
agesq + educ + educsq + married
+ famsize + white, data = alcohol)
install.packages("tidyverse")
install.packages("stargazer")
library(tidyverse)
library(stargazer)
install.packages("wooldridge")
library(wooldridge)
#-----------------------------------------------------------------------
#Load Data
view(alcohol)
reg.2 <- lm(abuse ~ northeast + midwest + south + centcity
+ outercity + unemrate + beertax + cigtax + age +
agesq + educ + educsq + married
+ famsize + white, data = alcohol)
summary(reg.2)
reg.1 <- lm(abuse ~ northeast + midwest + south + centcity
+ outercity + unemrate + beertax + cigtax, data = alcohol)
summary(reg.1)
install.packages("tidyverse")
install.packages("stargazer")
library(tidyverse)
library(stargazer)
install.packages("wooldridge")
library(wooldridge)
reg.2 <- lm(abuse ~ northeast + midwest + south + centcity
+ outercity + unemrate + beertax + cigtax + age +
agesq + educ + educsq + married
+ famsize + white, data = alcohol)
summary(reg.2)
summary(reg.2)
5.443e-03/( -6.229e-05*2 )
9.485e-03/(-5.735e-04*2)
reg.1 <- lm(abuse ~ northeast + midwest + south + centcity
+ outercity + unemrate + beertax + cigtax, data = alcohol)
summary(reg.1)
(( 0.009416- 0.001684/7)) - ((1-0.009416)/9813)
install.packages("tidyverse")
install.packages("stargazer")
library(tidyverse)
library(stargazer)
install.packages("wooldridge")
library(wooldridge)
reg1.b <- lm(wage ~ belavg + abvavg + educ + I(educ^2) + exper + I(exper^2) +
union + goodhlth + black + married + south + bigcity + smllcity
+ service + female, data = beauty.data)
beauty.data <- data
reg1 <- lm(wage ~ belavg + abvavg + educ + exper + union + goodhlth + black + married + south + bigcity + smllcity + service + female, data = beauty.data)
summary(reg1)
reg1.b <- lm(wage ~ belavg + abvavg + educ + I(educ^2) + exper + I(exper^2) +
union + goodhlth + black + married + south + bigcity + smllcity
+ service + female, data = beauty.data)
summary(reg1.b)
reg1.b <- lm(wage ~ belavg + abvavg + educ + I(educ^2) + exper + I(exper^2) +
union + goodhlth + black + married + south + bigcity + smllcity
+ service + female, data = beauty.data)
summary(reg1.b)
reg1 <- lm(wage ~ belavg + abvavg + educ + exper + union + goodhlth + black + married + south + bigcity + smllcity + service + female, data = beauty.data)
summary(reg1)
reg1.b <- lm(wage ~ belavg + abvavg + educ + I(educ^2) + exper + I(exper^2) +
union + goodhlth + black + married + south + bigcity + smllcity
+ service + female, data = beauty.data)
reg.1 <- lm(abuse ~ northeast + midwest + south + centcity
+ outercity + unemrate + beertax + cigtax, data = alcohol)
summary(reg.1)
reg.2 <- lm(abuse ~ northeast + midwest + south + centcity
+ outercity + unemrate + beertax + cigtax + age +
agesq + educ + educsq + married
+ famsize + white, data = alcohol)
summary(reg.2)
(( 0.009416- 0.001684/7)) - ((1-0.009416)/9806)
#-----------------------------------------------------------------------
#Load Data
view(alcohol)
help("alcohol")
reg.3 <- lm(abuse ~ northeast + midwest + south + centcity
+ outercity + unemrate + beertax + cigtax + age +
agesq + educ + educsq + married
+ famsize + white + mothalc + fathalc + livealc , data = alcohol)
summary(reg.3)
summary(reg.3)
2.180e-02
4.319e-02
5.082e-02
5.443e-03
9.485e-03
-5.077e-04
(( 0.01398- 0.009416/2)) - ((1-0.01398)/9803)
(( 0.001684- 0/8)) - ((1-0.001684)/9813)
(( 0.001684-0)/8) - ((1-0.001684)/9813)
(( 0.009416- 0.001684)/7) / ((1-0.009416)/9813)
(( 0.001684-0)/8) / ((1-0.001684)/9813)
(( 0.01398- 0.009416)/2) / ((1-0.01398)/9803)
(( 0.009416- 0.001684)/7) / ((1-0.009416)/9813)
(( 0.01398- 0.009416/2)) / ((1-0.01398)/9803)
0.01398- 0.009416)/3) / ((1-0.01398)/9803) = 22.68762.
(( 0.01398- 0.009416)/3) / ((1-0.01398)/9803) =
(( 0.01398- 0.009416)/3) / ((1-0.01398)/9803)
(( 0.01398- 0.009416)/3) / ((1-0.01398)/9803)
summary(reg.2)
summary(reg.3)
install.packages("ggplot2")
library(ggplot2)
setwd("C:/Users/vanes/OneDrive/Desktop/QMBE_3730_Vanessa_Pham_2025/QMBE_3730_Vanessa_Pham_2025")
data <- read.csv('monthly_production.csv')
view(data)
install.packages("tidyverse")
library(tidyverse)
view(data)
ggplot(data, aes(x = month, y = production)) +
geom_point() +
geom_labelsmooth(aes(label = 'Linear Trend'), fill = "white",
method = "lm", formula = y ~ x,
size = 6, linewidth = 2, boxlinewidth = 0.6) +
theme_bw() + guides(color = 'none')
install.packages("geomtextpath")
library(geomtextpath)
ggplot(data, aes(x = month, y = production)) +
geom_point() +
geom_labelsmooth(aes(label = 'Linear Trend'), fill = "white",
method = "lm", formula = y ~ x,
size = 6, linewidth = 2, boxlinewidth = 0.6) +
theme_bw() + guides(color = 'none')
ggplot(data, aes(x = month, y = production)) +
geom_point() +
geom_labelsmooth(aes(label = 'Linear Trend'), fill = "red",
method = "lm", formula = y ~ x,
size = 6, linewidth = 2, boxlinewidth = 0.6) +
theme_bw() + guides(color = 'none')
ggplot(data, aes(x = month, y = production)) +
geom_point() +
theme_bw() + guides(color = 'none')
help(theme_bw())
help(plot)
help("theme_bw")
ggplot(data, aes(x = month, y = production)) +
geom_point() +
theme_bw() + guides(color = 'red')
ggplot(data, aes(x = month, y = production)) +
geom_point() +
theme_bw()
ggplot(data, aes(x = month, y = production)) +
geom_line() +
theme_bw()
ggplot(data) +
geom_line(aes(x = month, y = production)) +
theme_bw()
ggplot(data) +
geom_line(aes(x = month, y = production))
how do I adjust
ggplot(data) +
geom_line(aes(x = month, y = production))
geom_line()
ggplot(data, aes(x = month, y = production) +
geom_line()
ggplot(data, aes(x = month, y = production)) +
ggplot(data, aes(x = month, y = production)) +
geom_line()
data$month <- as.Date(paste0(data$month, "-01"))
ggplot(data, aes(x = month, y = production)) +
geom_line()
# Convert to time series object
ts_data <- ts(data$production, start = c(1956, 1), frequency = 12)
view(ts_data)
# Decompose the time series
decomposed <- decompose(ts_data)
# Plot the components
plot(decomposed)
#adding seasonality to the datatable
seasonality <- seasonality %>% (mutate(season = rep(1:12, length.out =nrow(seasonality)))
length.out =nrow(seasonality)))
(mutate(season = rep(1:12, length.out =nrow(seasonality)))
#adding seasonality to the datatable
seasonality <- seasonality %>%
#adding seasonality to the datatable
seasonality <- seasonality %>%
(mutate(season = rep(1:12, length.out =nrow(seasonality))))
#adding seasonality to the datatable
seasonality <- seasonality %>%
mutate(season = rep(1:12, length.out =nrow(seasonality)))
#adding seasonality to the datatable
seasonality <- data.frame(
month = time(decomposed$seasonal)
)
seasonality <- seasonality %>%
mutate(season = rep(1:12, length.out =nrow(seasonality)))
#plot ACF
acf(ts_data, main = "ACF")
#plot PACF
pacf(ts_data, main = "PACF"
#plot PACF
pacf(ts_data, main = "PACF")
#plot PACF
pacf(ts_data, main = "PACF")
ggplot(data, aes(x = month, y = production)) +
geom_line(main = "Production Line Graph 1956-1995")
# Split Data into training and test sets
dim_data<-dim(data)
#Use Ceiling function to round up to the nearest whole number
train<-ceiling((0.7*dim_data[1]))
train
training_set=data$data[1:len_train]
training_set=data$data[1:train]
test_set=data$data[(train+1):dim_data[1]]
dim(data.frame(training_set))
dim(data.frame(test_set))
training_set=data$production[1:train]
test_set=data$production[(train+1):dim_data[1]]
dim(data.frame(training_set))
dim(data.frame(test_set))
trend <- lm(production ~ month, data = data)
trend
library(zoo)
mas_prod <- zoo::rollmean(data$production, k = 12, fill = NA, align = "center")
library(forecast)
installed.packages("forecast")
library(forecast)
install.packages("forecast")
library(forecast)
ses_data <- ses(training_set)
ses_data
autoplot(forecast_ses) +
autolayer(test_ts, series = "Actual", color = "red") +
labs(title = "Simple Exponential Smoothing Forecast vs. Actual",
y = "Production", x = "Time")
autoplot(forecast_ses) +
autolayer(test_set, series = "Actual", color = "red") +
labs(title = "Simple Exponential Smoothing Forecast vs. Actual",
y = "Production", x = "Time")
forecast_ses <- forecast(ses_data, h = length(test_set))
ses_data <- ses(training_set, h = length(test_set))
autoplot(ses_data) +
autolayer(test_ts, series = "Actual", color = "red") +
labs(title = "Simple Exponential Smoothing Forecast vs Actual",
x = "Year", y = "Production")
autoplot(ses_data) +
autolayer(test_test, series = "Actual", color = "red") +
labs(title = "Simple Exponential Smoothing Forecast vs Actual",
x = "Year", y = "Production")
autoplot(ses_data) +
autolayer(test_set, series = "Actual", color = "red") +
labs(title = "Simple Exponential Smoothing Forecast vs Actual",
x = "Year", y = "Production")
test_set_2 <- ts(test_set, start = (test_set), frequency = 12)
autoplot(ses_data) +
autolayer(test_set_2, series = "Actual", color = "red") +
labs(title = "Simple Exponential Smoothing Forecast vs Actual",
x = "Year", y = "Production")
accuracy(ses_data, test_set_2)
# Determine the start time of the test set
test_start_index <- time(data)[length(train_set) + 1]
# Determine the start time of the test set
test_start_index <- time(data)[length(train_set) + 1]
# Determine the start time of the test set
test_start_index <- time(ts_data)[length(train_set) + 1]
# Determine the start time of the test set
test_start_index <- time(ts_data)[length(training_set) + 1]
# Recreate test_set_2 as a time series
test_set_2 <- ts(test_set_2, start = test_start_index, frequency = 12)
#evaluate it's performance
accuracy(ses_data, test_set_2)
# Recreate test_set_2 as a time series
test_set_2 <- window(ts_data, start = time(ts_data)[train], frequency = 12)
#evaluate it's performance
accuracy(ses_data, test_set_2)
training_set=window(ts_data, end = time(ts_data)[train])
test_set=window(ts_data, start = time(ts_data)[train])
#making sure that the test set is a time series
test_set_2 <- ts(test_set, start = (test_set), frequency = 12)
# Recreate test_set_2 as a time series
test_set_2 <- window(ts_data, start = time(ts_data)[train], frequency = 12)
#evaluate it's performance
accuracy(ses_data, test_set_2)
#evaluate it's performance
accuracy(ses_data, test_set\)
#evaluate it's performance
accuracy(ses_data, test_set)
test_set=window(ts_data, start = time(ts_data)[train])
#evaluate it's performance
accuracy(ses_data, test_set)
#Use Ceiling function to round up to the nearest whole number and splitting it 70/30
n <- length(ts_data)
train<-ceiling((0.7*n))
training_set=window(ts_data, end = time(ts_data)[train])
test_set=window(ts_data, start = time(ts_data)[train])
#evaluate it's performance
accuracy(ses_data, test_set)
#making the ses
ses_data <- ses(training_set, h = length(test_set))
#evaluate it's performance
accuracy(ses_data, test_set)
ses_5_per <- ses(ts_data, h = 5)
ses_5_per <- ses(ts_data, h = 5)
ses_5_per
autoplot(ses_model) +
labs(title = "Simple Exponential Smoothing Forecast",
x = "Time",
y = "Production") +
theme_minimal()
autoplot(ses_5_per) +
labs(title = "Simple Exponential Smoothing Forecast",
x = "Time",
y = "Production") +
theme_minimal()
#11. Compare the forecasting accuracy using metrics like MAE, RMSE, and MAPE.
accuracy(ses_5_per, test_set)
#evaluate it's performance
accuracy(ses_data, test_set)
install.packages("tseries")
install.packages("tseries")
library(tseries)
adf.test(ts_data)
adf.test(ts_data)
kpss.test(training_set)
adf.test(training_set)
kpss_set <- kpss.test(training_set)
adf_set <- adf.test(training_set)
forecast_set <- (kpss_set+adf_set)/2
